#!/usr/bin/env perl
#========================================================================================#
# check_fileset_inodes - This script will check all gpfs file systems and file sets to   #
#                        see if they are low on inodes.  If so, it will automatically    #
#                        increment them based on the config file.                        #
#----------------------------------------------------------------------------------------#
# Author: Chad Kerner, ckerner@illinois.edu                                              #
#         Senior Systems Engineer                                                        #
#         Storage Enabling Technologies                                                  #
#         National Center for Supercomputing Applications                                #
#         University of Illinois, Urbana-Champaign                                       #
#----------------------------------------------------------------------------------------#
# NOTE: This utility requires that quota's be enabled on the file system in order for    #
#       tracking the inode usage.  They don't have to be set and/or enforced, just on.   #
#========================================================================================#

#----------------------------------------------------------------------------------------#
# Package Declarations                                                                   #
#----------------------------------------------------------------------------------------#
use strict;
use warnings;
use Fcntl qw(:flock);
use Getopt::Long;
use Data::Dumper;
use POSIX qw( strftime );
use Time::HiRes qw( time );

#----------------------------------------------------------------------------------------#
# Function Prototypes                                                                    #
#----------------------------------------------------------------------------------------#
sub check_options();
sub print_help_screen();
sub check_manager();
sub check_lock();
sub create_config_file($);

#----------------------------------------------------------------------------------------#
# Variable Declarations                                                                  #
#----------------------------------------------------------------------------------------#
$main::default_fileset = 'root';
$main::default_threshhold = 150000;
$main::default_increment = 250000;
$main::influx_config = '/etc/cfi/cfi.cfg';
@main::ignore_devices = qw( );


#----------------------------------------------------------------------------------------#
# check_manager() - Check to see if this node is the GPFS manager node.  Only execute on #
#                   the GPFS manager node to avoid multiple running instances.           #
#----------------------------------------------------------------------------------------#
sub check_manager() {
    my $myhost = `hostname -s`;
    chomp $myhost;

    my $mmlsmgr = `/usr/lpp/mmfs/bin/mmlsmgr -c`;
    $mmlsmgr =~ s/\(//;
    $mmlsmgr =~ s/\)//;

    if( index( $mmlsmgr, $myhost ) > 0 ) {
	if( $main::verbose ) {
	    print "$myhost is the cluster manager.\n";
	}
    }
    else {
	if( $main::verbose ) {
	    print "$myhost is not the cluster manager.\n";
	}
	exit 1;
    }
}

sub check_lock() {
    open our $lock_file, '<', $0 or die $!;
    my $rc = flock $lock_file, LOCK_EX|LOCK_NB;
    if( $rc == 0 ) {
	if( $main::verbose ) {
            chomp($0);
	    print $0 . " is already running.\n";
	}
	exit 2;
    }
}

sub create_config_file($) {
    my $config_file = $_[0];

    if( $main::verbose ) { print "Creating config file: $config_file\n"; }

    open( OUTFIL, ">$config_file" ) || die("Unable to open file: $config_file. $!\n");
    printf OUTFIL "%-10s   %10s   %10s\n", '# Fileset', 'Threshhold', 'Increment';
    printf OUTFIL "%-10s   %10d   %10d\n", $main::default_fileset, $main::default_threshhold, $main::default_increment;
    close( OUTFIL );
    return;
}

#----------------------------------------------------------------------------------------#
# check_options() - Parse the command line options.                                      #
#----------------------------------------------------------------------------------------#
sub check_options() {
    my $result = GetOptions ( 'v'   => \$main::verbose,
                              "i=s" => \@main::ignore_devices, 
                              'f'   => \$main::force_run, 
                              'd'   => \$main::debug, 
                              's'   => \$main::no_influx, 
			      'h'   => sub { print_help_screen(); },
			    );
    
    # Handle multiple devices and multiple occurrences of -i.
    @main::ignore_devices = split( /,/, join( ',', @main::ignore_devices ) );

}


#----------------------------------------------------------------------------------------#
# print_help_screen() - Pring the help screen.                                           #
#----------------------------------------------------------------------------------------#
sub print_help_screen() {
    my $basename = `basename $0`;
    chomp $basename;
    my $output = <<EOHELP;

    Usage: $basename [-v] [-f] [-h]

    -i     Ignore specified devices.

    -v     Execute in verbose mode. The default is to be very quiet.

    -d     Execute in debug mode. This produces a log of output!   

    -f     Force a run even if the node is not the cluster manager node.

    -s     Do not write out the influx dataase file.                       

    -h     This help screen.

EOHELP

    print $output;
    exit;
}

sub load_config_file($) {
    my $config_file = $_[0];
    my %hash;
    open( INCFG, "$config_file" ) || die("Unable to open: $config_file: $!\n");
    NEXTCFG: while( <INCFG> ) {
        chomp;
	s/^\s+//g;               # Strip left white space
	s/\s+$//g;               # Strip right white space
	next NEXTCFG if m/^$/;   # Skip blank lines
        next NEXTCFG if m/^#/;   # Skip comment lines
        my @ara = split( /\s+/, $_, 3 );
	$hash{$ara[0]}{THRESHHOLD} = $ara[1];
	$hash{$ara[0]}{INCREMENT} = $ara[2];
    }
    close( INCFG ); 
    return %hash;
}

sub quotas_enabled($) {
    my $gpfsdev = $_[0];
    my $found = 0;
    open(INCMD, "/usr/lpp/mmfs/bin/mmlsfs $gpfsdev |");
    RECORD: while( <INCMD> ) {
       chomp;
       next RECORD if ! m/accounting enabled/;
       next RECORD if ! m/fileset/;
       $found++;
    }
    close(INCMD);
    return $found;
}

sub load_quota_info($) {
    my $gpfsdev = $_[0];
    my %hash;
    open( QUOTA, "/usr/lpp/mmfs/bin/mmrepquota -j -Y $gpfsdev |");
    QREC: while( <QUOTA> ) {
        chomp;
	s/^\s+//g;
	s/\s+$//g;
	next QREC if m/^$/;
	next QREC if m/HEADER/;
	my @ara = split( /:/, $_ );

        if( $main::debug ) {
            print "Raw: $_\n";
            print "* $ara[6] * $ara[9] * $ara[15] * $ara[18] *\n";
        }
	my $fset = $ara[9];

        # Block usage and quota information
        $hash{$fset}{parent} = $gpfsdev;
        $hash{$fset}{blocks} = $ara[10];
        $hash{$fset}{squotab} = $ara[11];
        $hash{$fset}{hquotab} = $ara[12];
        $hash{$fset}{in_doubtb} = $ara[13];

        # File usage and quota information
	$hash{$fset}{files} = $ara[15];
        $hash{$fset}{squotaf} = $ara[16];
        $hash{$fset}{hquotaf} = $ara[17];
	$hash{$fset}{in_doubt} = $ara[18];
    }
    close( QUOTA );
    return %hash;
}

sub load_fileset_info($) {
    my $gpfsdev = $_[0];
    my %hash;
    open( FILESET, "/usr/lpp/mmfs/bin/mmlsfileset $gpfsdev -L -Y|");
    FREC: while( <FILESET> ) {
        chomp;

	# Skip the command output headers
	next FREC if m/HEADER/;

	my @ara = split( /:/, $_ );
	my $fset = $ara[7];

	$hash{$fset}{parent_id} = $ara[12];
	$hash{$fset}{inode_space} = $ara[9];
	$hash{$fset}{max} = $ara[32];
	$hash{$fset}{alloc} = $ara[33];
    }
    close( FILESET ); 
    return %hash;
}

# Main Code Block
{
    # Check the command line options.
    check_options();

    # Check to see if we are running on the GPFS manager node, unless we are
    # forcing a run.
    if( ! defined( $main::force_run ) ) { check_manager(); }

    # Check to see if the script is locked because it is already running.
    check_lock();

    # If storing data into influx, load the configuration.
    if( ! $main::no_influx ) {
        open(INCFG, $main::influx_config) || die("Unable to open: $main::influx_config : $!\n");
        INREC: while( <INCFG> ) {
            chomp;
	    s/^\s+//g;
	    s/\s+$//g;
	    next INREC if m/^$/;
	    next INREC if m/^#/;
            my ($key, $value) = split(/=/, $_, 2);
            $key =~ s/\s+$//g;
            $value =~ s/^\s+//g;
            $main::influx{$key} = $value;
        }
        close(INCFG);

        $main::influx{influx_url}  = $main::influx{curl_path} . ' -XPOST ';
        if ( $main::influx{http_proxy} ) { $main::influx{influx_url} .= '-x ' . $main::influx{http_proxy} . ' '; }
        $main::influx{influx_url} .= '-u ' . $main::influx{influx_user} . ':' . $main::influx{influx_pass} . ' ';
        $main::influx{influx_url} .= $main::influx{influx_service} . '/write?db=' . $main::influx{influx_db} . ' ';
        $main::influx{influx_url} .= '-d "' . $main::influx{influx_metric} . ',cluster=' . $main::influx{gpfs_cluster};

        my $dt = strftime( "%Y%m%d%H%M%S", localtime() );
        $main::sqllog = $main::influx{influx_output} . '/' . $main::influx{gpfs_cluster};
        $main::sqllog .= '.' . $main::influx{influx_metric} . '.' . $dt;

        if( $main::debug ) { print Dumper \%main::influx; print "$main::sqllog\n"; }
    }

    # Lets get busy...
    $main::header = 0;
    open( MNTFIL, "mount -t gpfs |") || die("Unable to execute: mount -t gpfs: $!\n");
    NXTMNT: while( <MNTFIL> ) {

        # Skip GPFS bind mounts in the NFSv4 tree
        next NXTMNT if m/on \/export/;

        my @mount = split( /\s+/, $_, 6 );
	my $dev = $mount[0];
	my $mount_point = $mount[2];
	my $gpfsdev = '';
	$gpfsdev = $dev; 
        $gpfsdev =~ s/^\/.*\///;

	foreach( @main::ignore_devices ) {
	   if( $gpfsdev =~ m/$_/ ) {
	       if( $main::verbose ) { print "Skipping: $gpfsdev due to ignore request.\n"; }
	       next NXTMNT;
	   }
	}

	if( $main::verbose ) { print "Processing: $gpfsdev mounted at $mount_point\n"; }

	$main::config_file = $mount_point . '/.inocfg';
	$main::log_file = $mount_point . '/.inolog';
	if( ! -f $main::config_file ) { create_config_file( $main::config_file ); }

	# Load the threshholds and increments.
	%main::settings = load_config_file( $main::config_file );

	if( quotas_enabled( $gpfsdev ) ) {
                # Store all of the quota information for the filesets.
		%main::quota = load_quota_info( $gpfsdev );
		if( $main::debug ) { print Dumper \%main::quota; }

                # Load all of the fileset information that we want to keep.
		%main::filesets = load_fileset_info( $gpfsdev );
		if( $main::debug ) { print Dumper \%main::filesets; }

		my $fset;
		NXTFST: foreach $fset ( sort( keys %main::filesets ) ) {
		    if( $main::verbose ) {
		        if( $main::header == 0 ) {
		            printf "%-25s \t %16s \t %16s\n", 'Device', 'Threshhold', 'Difference';
			    $main::header++;
		        }
		    }
		    if( $main::filesets{$fset}{parent_id} eq '--' && $fset ne 'root' ) {
		        if( $main::verbose ) { print "$gpfsdev : $fset is not an independent inode fileset.\n"; }
		    }
		    elsif( $fset ne 'root' && $main::filesets{$fset}{inode_space} eq '0' ) {
		        if( $main::verbose ) { print "$gpfsdev : $fset is not an independent inode fileset.\n"; }
		    }
		    elsif( $fset ne 'root' && $main::filesets{$fset}{alloc} eq '0' ) {
		        if( $main::verbose ) { print "$gpfsdev : $fset is not an independent inode fileset.\n"; }
		    }
		    else {
		        # Calculate the offset
			my $threshhold;
			my $increment;
			if( defined( $main::settings{$fset}{THRESHHOLD} ) ) {
			    $threshhold = $main::settings{$fset}{THRESHHOLD};
			    $increment = $main::settings{$fset}{INCREMENT};
			}
			else {
			    $threshhold = $main::settings{root}{THRESHHOLD};
			    $increment = $main::settings{root}{INCREMENT};
			}

                        if( $main::debug ) {
                            print "   File Set: $fset\n";
                            print "  Increment: $increment\n";
                            print " Max Inodes: $main::filesets{$fset}{max}\n";
                            print "Quota Files: $main::quota{$fset}{files}\n";
                            print "Quota Doubt: $main::quota{$fset}{in_doubt}\n";
                        }

		        my $diff = int($main::filesets{$fset}{max}) - ( int($main::quota{$fset}{files}) + int($main::quota{$fset}{in_doubt}) );

                        if( ! $main::no_influx ) {
                            my $dbout = '';
                            $dbout .= $main::influx{influx_url} . ',';
                            $dbout .= 'gpfsdev=' . $main::quota{$fset}{parent} . ',';
                            $dbout .= 'fileset=' . $fset . ' ';
                            $dbout .= 'blocks=' . ( int($main::quota{$fset}{blocks}) + int($main::quota{$fset}{in_doubtb}) ) . ',';
                            $dbout .= 'squotab=' .  $main::quota{$fset}{squotab} . ',';
                            $dbout .= 'hquotab=' .  $main::quota{$fset}{hquotab} . ',';
                            $dbout .= 'files=' . ( int($main::quota{$fset}{files}) + int($main::quota{$fset}{in_doubt}) ) . ',';
                            $dbout .= 'squotaf=' .  $main::quota{$fset}{squotaf} . ',';
                            $dbout .= 'hquotaf=' .  $main::quota{$fset}{hquotaf} . ' ';
                            $dbout .= int(time() * 1e9) . '"';

                            if( $main::debug ) {
                                printf "$dbout\n";
                            }
                            open(SQL, ">>$main::sqllog");
                            printf SQL "$dbout\n";
                            close(SQL);
                        }

			if( $diff < $threshhold ) {
			    my $new_limit = int($main::filesets{$fset}{max}) + int($increment);
			    my $date = strftime("%Y-%m-%d %H:%M:%S", localtime());

			    # Log the increases
			    open(LOGOUT, ">>$main::log_file");
			    printf LOGOUT "$date  $gpfsdev:$fset  $main::filesets{$fset}{max} -> $new_limit\n";
			    close(LOGOUT);

			    printf "$gpfsdev:$fset  $main::filesets{$fset}{max} -> $new_limit\n";
			    system("/usr/lpp/mmfs/bin/mmchfileset $gpfsdev $fset --inode-limit $new_limit");
			}
			else {
			    if( $main::verbose ) {
			        printf "%-25s \t %16s \t %16s\n", "$gpfsdev:$fset", $threshhold, $diff;
			    }
			}
		    }
		}
	}
	else {
	    print "Quotas are not enabled on: $gpfsdev - $mount_point\n";
        }
    }
    close( MNTFIL );

    exit;
} # End of the main code block.

